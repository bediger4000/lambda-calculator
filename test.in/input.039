# Scott Numerals as per March 8, 2006 revision of John Tromp's 
# paper, "Binary Lambda Calculus and Combinatory Logic".
# "The Scott Numerals [i] can be used to define arithmetic, as
# well as for indexing lists; M [i] select's the i'th element
# of a sequence M."

eta on

define zero %a.%b.a
define succ %c.%d.%e.(e c)
define case %f.%g.%h.f g h
define pred %i.(i (%j.%k.j) (%l.l))

def True \x.\y.x
def False \x.\y.y

def nil False
def sn0 True
def sn1 (normalize succ sn0)
def sn2 (normalize succ sn1)
def sn3 (normalize succ sn2)
def sn4 (normalize succ sn3)
def sn5 (normalize succ sn4)
def sn6 (normalize succ sn5)

# check pairing operator
define pair (\p.\q.\z.z p q)
normalize (pair true false) True == true
normalize (pair true false) False == false

# define a list, check that each incrementally composed Scott numeral works
def list (normalize (pair _zero (pair _one (pair _two (pair _three (pair _four (pair _five (pair _six nil))))))))

check_incremental_scott_numerals
normalize list sn0 == _zero
normalize list sn1 == _one
normalize list sn2 == _two
normalize list sn3 == _three
normalize list sn4 == _four
normalize list sn5 == _five
normalize list sn6 == _six

def Y (\x.\y.x y x)(\y.\x. y(x y x))
define R (\o.\n.\m.( case m n (o (succ n)) ))
define add (Y R)

check_added_scott_numerals
normalize list (add sn0 sn0) == _zero
normalize list (add sn0 sn1) == _one
normalize list (add sn1 sn0) == _one
normalize list (add sn1 sn1) == _two
normalize list (add sn2 sn1) == _three
normalize list (add sn1 sn2) == _three
normalize list (add sn2 sn2) == _four
normalize list (add sn2 sn3) == _five
normalize list (add sn3 sn3) == _six
normalize list (add (add sn2 sn1) (add sn1 sn2)) == _six
